def plot_compare(orig_img, vis_dict, pred_labels, pred_scores, ig, true_label, output_directory, filename):
    """
    Plotting a figure including the original image, images with different compression ratios with overlay
    on each of them.
    """
    import matplotlib.pyplot as plt
    import os
    import numpy as np
    output_filename = os.path.join(output_directory, "comparisons_{}.png".format(filename))

    target_image = np.array(orig_img).squeeze()
    target_imag_trans = target_image.transpose((1, 2, 0))
    assert len(vis_dict.keys()) == 3

    # save the images as npy files for further plotting
    np.save(os.path.join(output_directory, f'{filename}_baseline.npy'), (255.0*target_imag_trans).astype(np.uint8))
    np.save(os.path.join(output_directory, f'{filename}_IG75.npy'), vis_dict['75'].astype(np.uint8))
    np.save(os.path.join(output_directory, f'{filename}_IG50.npy'), vis_dict['50'].astype(np.uint8))
    np.save(os.path.join(output_directory, f'{filename}_IG25.npy'), vis_dict['25'].astype(np.uint8))
    print(f" --- Npy files saved to {output_directory} with filename prefix {filename} --- \n")

    fig, (ax0, ax1, ax2, ax3) = plt.subplots(1, 4, figsize=(120, 51))
    ax0.set_title("Baseline", fontsize=100)
    ax0.axis('off')
    ax0.imshow((255.0*target_imag_trans).astype(np.uint8))

    ax1.set_title("IG 75", fontsize=100)
    ax1.axis('off')
    ax1.imshow(vis_dict['75'].astype(np.uint8))

    ax2.set_title("IG 50", fontsize=100)
    ax2.axis('off')
    ax2.imshow(vis_dict['50'].astype(np.uint8))

    ax3.set_title("IG 25", fontsize=100)
    ax3.axis('off')
    ax3.imshow(vis_dict['25'].astype(np.uint8))

    fig.suptitle(f"| true label: {true_label[0]}"
                 f"| predicted labels: {pred_labels['100']}, {pred_labels['75']}, {pred_labels['50']}, {pred_labels['25']}"
                 f"| predicted score at true label: {pred_scores['100']:.4f}, {pred_scores['75']:.4f}, {pred_scores['50']:.4f}, {pred_scores['25']:.4f}"
                 f"| integrated grads: {np.sum(np.array(ig['75'])):.4f}, {np.sum(np.array(ig['50'])):.4f}, "
                 f"{np.sum(np.array(ig['25'])):.4f}",
                 fontsize=100, wrap=True)

    plt.savefig(output_filename)
    print("Plots saved to {}!\n".format(output_filename))


def main():
    import argparse
    import os
    import json
    import numpy as np
    from visualization_lib import Visualize

    parser = argparse.ArgumentParser()
    parser.add_argument("--data_dir", help="directory where the computed IGs are saved")
    parser.add_argument("--output_dir")
    parser.add_argument("--test_name")
    parser.add_argument("--index", type=int)
    parser.add_argument("--img_encoder")
    parser.add_argument("--polarity", help="positive, negative, both")
    parser.add_argument("--dataset_name")

    args = parser.parse_args()
    data_dir = args.data_dir
    output_dir = args.output_dir
    test_name = args.test_name
    index = args.index
    img_encoder = args.img_encoder
    polarity = args.polarity
    dataset_name = args.dataset_name

    ig_dict_save_path = os.path.join(data_dir, f'ig_dict_{test_name}_{index}_{img_encoder}_{dataset_name}.json')
    data_dict_save_path = os.path.join(data_dir, f'data_dict_{test_name}_{index}_{img_encoder}_{dataset_name}.json')
    pred_label_list_save_path = os.path.join(data_dir, f'pred_label_list_{test_name}_{index}_{img_encoder}_{dataset_name}.json')
    pred_scores_at_true_label_list_save_path = os.path.join(data_dir, f'pred_scores_at_true_label_list_{test_name}_{index}_{img_encoder}_{dataset_name}.json')
    label_list_save_path = os.path.join(data_dir, f'label_list_{test_name}_{index}_{img_encoder}_{dataset_name}.json')

    with open(ig_dict_save_path, 'r') as file:
        ig_dict = json.load(file)

    with open(data_dict_save_path, 'r') as file:
        data_dict = json.load(file)

    with open(pred_label_list_save_path, 'r') as file:
        pred_label_list = json.load(file)

    with open(pred_scores_at_true_label_list_save_path, 'r') as file:
        pred_scores_at_true_label_list = json.load(file)

    with open(label_list_save_path, 'r') as file:
        label_list = json.load(file)

    vis_dict = {}
    compression_quality_list_plotting = ['75', '50', '25']
    for i in compression_quality_list_plotting:
        img = np.array(data_dict[i]).squeeze()
        img = 255.0*img.transpose((1, 2, 0))

        grads_integrated = np.array(ig_dict[i]).squeeze()
        grads_integrated = grads_integrated.transpose((1, 2, 0))

        image_from_visualizing = Visualize(
            grads_integrated, img,
            clip_above_percentile=99,
            clip_below_percentile=0,
            overlay=True,
            polarity=polarity)
        vis_dict[i] = image_from_visualizing
    print("Images with IG overlay have been loaded\n")
    filename = test_name + '_' + f'{index}' + '_' + img_encoder + '_' + polarity + '_' + dataset_name
    plot_compare(orig_img=data_dict['100'], vis_dict=vis_dict, pred_labels=pred_label_list, ig=ig_dict,
                 pred_scores=pred_scores_at_true_label_list, true_label=label_list['100'], output_directory=output_dir,
                 filename=filename)


if __name__ == '__main__':
    main()